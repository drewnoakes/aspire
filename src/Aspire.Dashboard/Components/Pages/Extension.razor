@page "/extension/{*TargetUrl}"

@implements IDisposable

@using Aspire.Dashboard.Extensibility
@using Aspire.Dashboard.Model
@using System.Diagnostics

@inject IExtensionRegistry ExtensionRegistry
@inject IJSRuntime JS
@inject ThemeManager ThemeManager

@if (!_isLoaded)
{
    <!-- TODO center this on screen -->
    <FluentProgressRing />
}
else if (_extensionUrl != null)
{
    <iframe id="extension-frame" src="@_extensionUrl" style="width:100%; height:100%;"></iframe>
}
else
{
    <h3>Page not found</h3>
}

@code {
    private string? _extensionUrl;
    private bool _isLoaded;
    private IDisposable? _themeChangedSubscription;

    [Parameter]
    public string? TargetUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // TODO what happens if the URL contains extra levels?

        if (TargetUrl is not null)
        {
            _extensionUrl = await ExtensionRegistry.GetTopLevelPageUrlAsync(TargetUrl, CancellationToken.None);
            _isLoaded = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeManager.EnsureEffectiveThemeAsync();

            var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Extension.razor.js");

            var themeName = ThemeManager.EffectiveTheme.ToLowerInvariant();

            _themeChangedSubscription = ThemeManager.OnThemeChanged(async () =>
            {
                var newTheme = ThemeManager.EffectiveTheme.ToLowerInvariant();

                if (!string.Equals(themeName, newTheme, StringComparison.Ordinal))
                {
                    themeName = newTheme;

                    await jsModule.InvokeVoidAsync("setTheme", themeName);
                }
            });

            await jsModule.InvokeVoidAsync("onExtensionLoad", themeName);
        }
    }

    public void Dispose()
    {
        _themeChangedSubscription?.Dispose();
    }
}
