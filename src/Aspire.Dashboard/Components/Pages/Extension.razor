@page "/extension/{*UrlSlug}"

@implements IDisposable

@using Aspire.Dashboard.Extensibility
@using Aspire.Dashboard.Model
@using System.Diagnostics

@inject IExtensionRegistry ExtensionRegistry
@inject IJSRuntime JS
@inject ThemeManager ThemeManager
@inject ILogger<ChartContainer> Logger
@inject IStringLocalizer<Aspire.Dashboard.Resources.Routes> Loc

<PageTitle>@_pageTitle</PageTitle>

@if (!_isLoaded)
{
    <!-- TODO center this on screen -->
    <FluentProgressRing />
}
else if (_extensionUrl != null)
{
    <iframe id="extension-frame" src="@_extensionUrl" style="width:100%; height:100%;"></iframe>
}
else
{
    <h3>@Loc[nameof(Aspire.Dashboard.Resources.Routes.NotFoundDetails)]</h3>
}

@code {
    private string? _extensionUrl;
    private string? _pageTitle;
    private bool _isLoaded;
    private IDisposable? _themeChangedSubscription;
    private string? _lastUrlSlug;

    [Parameter]
    public string? UrlSlug { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (UrlSlug is not null && !StringComparers.TopLevelPageUrlSlug.Equals(UrlSlug, _lastUrlSlug))
        {
            var page = await ExtensionRegistry.GetTopLevelPageConfigurationAsync(UrlSlug, CancellationToken.None);

            if (page is null)
            {
                Logger.LogWarning($"Extension page not found: {UrlSlug}");
                _extensionUrl = null;
                _pageTitle = null;
            }
            else
            {
                _lastUrlSlug = UrlSlug;
                _pageTitle = page.Configuration.Title;
                _extensionUrl = GetExtensionBaseUrl(page);

                Logger.LogDebug("Loading extension \"{Title}\" ({Slug}) content from {TargetUrl}", _pageTitle, UrlSlug, _extensionUrl);
            }

            _isLoaded = true;
        }

        static string GetExtensionBaseUrl(TopLevelPageData page)
        {
            UriBuilder builder = new(page.ExtensionBaseUrl);

            // TODO handle case where target URL is either absolute or relative

            var targetUrl = page.Configuration.TargetUrl;

            builder.Path += targetUrl.StartsWith('/') ? targetUrl[1..] : targetUrl;

            return builder.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ThemeManager.EnsureEffectiveThemeAsync();

            var jsModule = await JS.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Extension.razor.js");

            var themeName = GetThemeName();

            _themeChangedSubscription = ThemeManager.OnThemeChanged(async () =>
            {
                var newTheme = GetThemeName();

                if (!string.Equals(themeName, newTheme, StringComparison.Ordinal))
                {
                    themeName = newTheme;

                    await jsModule.InvokeVoidAsync("setTheme", themeName);
                }
            });

            await jsModule.InvokeVoidAsync("onExtensionLoad", themeName);

            string GetThemeName() => ThemeManager.EffectiveTheme.ToLowerInvariant();
        }
    }

    public void Dispose()
    {
        _themeChangedSubscription?.Dispose();
    }
}
