@page "/extension/{*UrlSlug}"

@implements IDisposable

@using Aspire.Dashboard.Extensibility
@using Aspire.Dashboard.Model
@using System.Diagnostics

@inject IExtensionRegistry ExtensionRegistry
@inject IJSRuntime JS
@inject ThemeManager ThemeManager
@inject ILogger<ChartContainer> Logger
@inject IStringLocalizer<Aspire.Dashboard.Resources.Routes> Loc

<PageTitle>@_pageTitle</PageTitle>

@if (_isNotFound || string.IsNullOrWhiteSpace(UrlSlug))
{
    <div class="extension-not-found">
        <h3>@Loc[nameof(Aspire.Dashboard.Resources.Routes.NotFoundDetails)]</h3>
    </div>
}
else
{
    <div @key="@UrlSlug" style="width:100%; height:100%;">
        <div id="extension-load-spinner">
            <FluentProgressRing />
        </div>

        <iframe id="extension-frame" src="@_extensionUrl" style="display: none; width:100%; height:100%;"></iframe>
    </div>
}

@code {
    private string? _extensionUrl;
    private string? _pageTitle;
    private bool _isNotFound;
    private bool _notifyOnNextRender;
    private IDisposable? _themeChangedSubscription;
    private string? _lastUrlSlug;

    [Parameter, EditorRequired]
    public string? UrlSlug { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (UrlSlug is not null && !StringComparers.TopLevelPageUrlSlug.Equals(UrlSlug, _lastUrlSlug))
        {
            var page = await ExtensionRegistry.GetTopLevelPageConfigurationAsync(UrlSlug, CancellationToken.None);

            if (page is null)
            {
                Logger.LogWarning($"Extension page not found: {UrlSlug}");
                _extensionUrl = null;
                _pageTitle = null;
                _isNotFound = true;
            }
            else
            {
                _lastUrlSlug = UrlSlug;
                _pageTitle = page.Configuration.Title;
                _extensionUrl = GetExtensionBaseUrl(page);
                _isNotFound = false;
                _notifyOnNextRender = true;

                Logger.LogDebug("Loading extension \"{Title}\" ({Slug}) content from {TargetUrl}", _pageTitle, UrlSlug, _extensionUrl);
            }
        }

        static string GetExtensionBaseUrl(TopLevelPageData page)
        {
            UriBuilder builder = new(page.ExtensionBaseUrl);

            // TODO handle case where target URL is either absolute or relative

            var targetUrl = page.Configuration.TargetUrl;

            builder.Path += targetUrl.StartsWith('/') ? targetUrl[1..] : targetUrl;

            return builder.ToString();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || _notifyOnNextRender)
        {
            var js = await JS.InvokeAsync<IJSObjectReference>("import", "/Components/Pages/Extension.razor.js");

            await ThemeManager.EnsureEffectiveThemeAsync();

            var themeName = GetThemeName();

            if (_themeChangedSubscription is null)
            {
                _themeChangedSubscription = ThemeManager.OnThemeChanged(async () =>
                {
                    var newTheme = GetThemeName();

                    if (!string.Equals(themeName, newTheme, StringComparison.Ordinal))
                    {
                        themeName = newTheme;

                        await js.InvokeVoidAsync("setTheme", themeName);
                    }
                });
            }

            await js.InvokeVoidAsync("onExtensionLoad", themeName);

            _notifyOnNextRender = false;

            string GetThemeName() => ThemeManager.EffectiveTheme.ToLowerInvariant();
        }
    }

    public void Dispose()
    {
        _themeChangedSubscription?.Dispose();
    }
}
